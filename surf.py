import asyncio
import logging
from datetime import datetime
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
import locale

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä—É—Å—Å–∫—É—é –ª–æ–∫–∞–ª—å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–Ω—è –Ω–µ–¥–µ–ª–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
locale.setlocale(locale.LC_TIME, "ru_RU.UTF-8")

# –í—Å—Ç–∞–≤—å—Ç–µ —Å–≤–æ–π —Ç–æ–∫–µ–Ω Telegram-–±–æ—Ç–∞ –∑–¥–µ—Å—å
BOT_TOKEN = '6746134454:AAHvuB_hSpTWLJ1j1CET678aQhsrCWrRHAI'

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)
logging.basicConfig(level=logging.INFO)

# –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –Ω–∞ –Ω–µ–¥–µ–ª—é
tasks = {
    "–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫": ["–ß–∏—Å—Ç–∫–∞ –≥—Ä–∏–Ω–¥–µ—Ä–∞", "–ß–∏—Å—Ç–∫–∞ –≥–µ–π–∑–µ—Ä–æ–≤", "–ó–∞–º–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–æ—Ä—Å—É–Ω–æ–∫ –∏ –∏—Ö —á–∏—Å—Ç–∫–∞"],
    "–≤—Ç–æ—Ä–Ω–∏–∫": ["–ü—Ä–æ—Ç–µ—Ä–µ—Ç—å –ª–∞–π—Ç –±–æ–∫—Å—ã –∏ –≤—ã–≤–µ—Å–∫–∏", "–í—ã–º–µ—Å—Ç–∏ –ª–∏—Å—Ç—å—è –∏ –º—É—Å–æ—Ä –ø–æ–¥ —Ç—Ä–∏–±—É–Ω—ã", "–ù–∞—Ç–µ—Ä–µ—Ç—å –∑–µ—Ä–∫–∞–ª–∞", "–ó–∞–º–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–æ—Ä—Å—É–Ω–æ–∫ –∏ –∏—Ö —á–∏—Å—Ç–∫–∞"],
    "—Å—Ä–µ–¥–∞": ["–ß–∏—Å—Ç–∫–∞ –≥—Ä–∏–ª—è –∏ –º–∏–∫—Ä–æ–≤–æ–ª–Ω–æ–≤–∫–∏", "–ó–∞—Ç–æ—á–∫–∞ –Ω–æ–∂–µ–π", "–ü—Ä–æ—Ç–µ—Ä–µ—Ç—å –ø—ã–ª—å (–∫–∞—Ä—Ç–∏–Ω—ã, –±–∞—Ç–∞—Ä–µ–∏, –ø–æ–ª–∫–∏)", "–ó–∞–º–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–æ—Ä—Å—É–Ω–æ–∫ –∏ –∏—Ö —á–∏—Å—Ç–∫–∞"],
    "—á–µ—Ç–≤–µ—Ä–≥": ["–£–±–æ—Ä–∫–∞ –Ω–∞ —Å–∫–ª–∞–¥–µ", "–ß–∏—Å—Ç–∫–∞ –≥—Ä–∏–Ω–¥–µ—Ä–∞", "–ó–æ–Ω–∞ –≤–∏—Ç—Ä–∏–Ω—ã (—É–±—Ä–∞—Ç—å –≤—Å–µ –ø–æ–¥–Ω–æ—Å—ã –∏ –∑–∞–º—ã—Ç—å, –Ω–∞—Ç–µ—Ä–µ—Ç—å –≤–∏—Ç—Ä–∏–Ω—É –≤–Ω—É—Ç—Ä–∏)", "–ó–∞–º–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–æ—Ä—Å—É–Ω–æ–∫ –∏ –∏—Ö —á–∏—Å—Ç–∫–∞"],
    "–ø—è—Ç–Ω–∏—Ü–∞": ["–ü—Ä–æ—Ç–µ—Ä–µ—Ç—å –ª–∞–π—Ç –±–æ–∫—Å—ã, –≥–∏—Ä–ª—è–Ω–¥—É –∏ –≤—ã–≤–µ—Å–∫—É", "–ó–æ–Ω–∞ —à–∫–∞—Ñ–æ–≤ –Ω–∞ –±–∞—Ä–µ (–ø—Ä–æ—Ç–µ—Ä–µ—Ç—å –ø–æ–ª–∫–∏, —Ä–∞—Å—Å—Ç–∞–≤–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ü–∏—é, –ø–æ–ø–æ–ª–Ω–∏—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ)", "–ó–∞–º–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–æ—Ä—Å—É–Ω–æ–∫ –∏ –∏—Ö —á–∏—Å—Ç–∫–∞"],
    "—Å—É–±–±–æ—Ç–∞": ["–ß–∏—Å—Ç–∫–∞ —Ç–µ—Ä–º–æ–ø–æ–¥–∞ –∫–∞—Ñ–∏–∑–æ–π", "–ß–∏—Å—Ç–∫–∞ –±–ª–µ–Ω–¥–µ—Ä–∞ –∫–∞—Ñ–∏–∑–æ–π", "–ü—Ä–æ—Ç–µ—Ä–µ—Ç—å —à–∫–∞—Ñ—ã —Å–≤–µ—Ä—Ö—É", "–ó–∞–º–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–æ—Ä—Å—É–Ω–æ–∫ –∏ –∏—Ö —á–∏—Å—Ç–∫–∞"],
    "–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ": ["–ü–æ—á–∏—Å—Ç–∏—Ç—å –±–æ–ª—å—à–æ–π –ø—ã–ª–µ—Å–æ—Å", "–ü—Ä–æ—Ç–µ—Ä–µ—Ç—å –ø—ã–ª—å (–∫–∞—Ä—Ç–∏–Ω—ã, –±–∞—Ç–∞—Ä–µ–∏, –ø–æ–ª–∫–∏)", "–ü—Ä–æ—Ç–µ—Ä–µ—Ç—å –∏ –ø–æ–º—ã—Ç—å –Ω–∏–∑ –±–∞—Ä–∞", "–ó–∞–º–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–æ—Ä—Å—É–Ω–æ–∫ –∏ –∏—Ö —á–∏—Å—Ç–∫–∞"]
}

# –¶–≤–µ—Ç—ã –∏ –æ–ø—Ä—ã—Å–∫–∏–≤–∞–Ω–∏–µ 
spray_schedule = {
    "–Æ–∫–∫–∞": {"interval": 2, "message": "–û–ø—Ä—ã—Å–∫–∞—Ç—å –Æ–∫–∫—É"},
    "–î—Ä–∞—Ü–µ–Ω–∞": {"interval": 2, "message": "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –î—Ä–∞—Ü–µ–Ω—É (–°–∞–Ω—è –∏ –ú–∏—è) –∏ –æ–ø—Ä—ã—Å–∫–∞—Ç—å –ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏"},
    "–¶–∏–∫–∞—Å": {"interval": 2, "message": "–û—Ç–∫—Ä—ã—Ç—å –∏ –ø—Ä–æ–≤–µ—Ç—Ä–∏—Ç—å —É–∫—Ä—ã—Ç—É—é –ø–∞–ª—å–º—É (–¶–∏–∫–∞—Å) –Ω–∞ —É–ª–∏—Ü–µ"}
}

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
def is_weekend():
    return datetime.now().weekday() >= 5  # –°—É–±–±–æ—Ç–∞ –∏ –í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ

def is_working_hour():
    now = datetime.now()
    hour = now.hour
    return 9 <= hour < 23 if is_weekend() else 7 <= hour < 23

# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
async def send_watering_reminder(chat_id):
    now = datetime.now()
    for plant, info in spray_schedule.items():
        last_watered = now - timedelta(days=info["interval"])
        if last_watered.weekday() == now.weekday():
            await bot.send_message(chat_id, info["message"])

async def send_daily_task_notification(chat_id):
    now = datetime.now()
    current_day = now.strftime("%A").lower()
    tasks_for_today = tasks.get(current_day, [])
    if tasks_for_today:
        message = f"–°–µ–≥–æ–¥–Ω—è {current_day}, –∑–∞–¥–∞—á–∏:\n" + "\n".join(f"‚Ä¢ {task}" for task in tasks_for_today)
        await bot.send_message(chat_id, message)

async def scheduled_task_notifications(chat_id):
    while True:
        if is_weekend():
            if datetime.now().hour in [10, 18]:
                await send_daily_task_notification(chat_id)
        else:
            if datetime.now().hour in [8, 17]:
                await send_daily_task_notification(chat_id)
        await asyncio.sleep(3600)  # –ü–∞—É–∑–∞ –≤ 1 —á–∞—Å

async def scheduled_cleanliness_reminders(chat_id):
    while True:
        if is_working_hour():
            await bot.send_message(chat_id, '–ù—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —á–∏—Å—Ç–æ—Ç—É –∫–æ—Ñ–µ–π–Ω–∏')
            await asyncio.sleep(7200)  # –ü–∞—É–∑–∞ –≤ 2 —á–∞—Å–∞
        else:
            await asyncio.sleep(3600)  # –ü–∞—É–∑–∞ –≤ 1 —á–∞—Å –≤–Ω–µ —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏

async def send_report_reminder(chat_id):
    now = datetime.now()
    if is_weekend():
        if now.hour in [16, 23]:
            await bot.send_message(chat_id, "–ü–æ—Ä–∞ –Ω–∞–ø–∏—Å–∞—Ç—å –æ—Ç—á–µ—Ç –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞—á –Ω–∞ —Å–µ–≥–æ–¥–Ω—è!")
    else:
        if now.hour in [15, 23] and now.minute >= 30:
            await bot.send_message(chat_id, "–ü–æ—Ä–∞ –Ω–∞–ø–∏—Å–∞—Ç—å –æ—Ç—á–µ—Ç –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞—á –Ω–∞ —Å–µ–≥–æ–¥–Ω—è!")

async def scheduled_report_reminders(chat_id):
    while True:
        await send_report_reminder(chat_id)
        await asyncio.sleep(1800)  # –ü–∞—É–∑–∞ –≤ 30 –º–∏–Ω—É—Ç

async def scheduled_watering_reminders(chat_id):
    while True:
        await send_watering_reminder(chat_id)
        await asyncio.sleep(86400)  # –ü–∞—É–∑–∞ –≤ 24 —á–∞—Å–∞

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /id
@dp.message_handler(commands=['id'])
async def send_chat_id(message: types.Message):
    chat_id = message.chat.id
    await message.reply(f"ID —ç—Ç–æ–≥–æ —á–∞—Ç–∞: {chat_id}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message_handler(commands=['start'])
async def send_welcome_message(message: types.Message):
    welcome_message = (
        "üåä –ü—Ä–∏–≤–µ—Ç, –¥—Ä—É–∑—å—è-—Å–µ—Ä—Ñ–µ—Ä—ã! üèÑ‚Äç‚ôÇÔ∏è\n\n"
        "üèÑ‚Äç‚ôÇÔ∏è –Ø –≤–∞—à –Ω–æ–≤—ã–π –ø–æ–º–æ—â–Ω–∏–∫-–±–æ—Ç, –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –¥–µ–ª–∞—Ç—å –≤–∞—à–µ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –≤–æ–ª–Ω–∞—Ö –µ—â–µ –±–æ–ª–µ–µ –Ω–µ–∑–∞–±—ã–≤–∞–µ–º—ã–º! "
        "–ë—É–¥—É —Ä–∞–¥ –ø–æ–º–æ–≥–∞—Ç—å –≤–∞–º —Å –ø–æ–ª–µ–∑–Ω—ã–º–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏ –∏ –∑–∞–±–æ—Ç–∏—Ç—å—Å—è –æ —Ç–æ–º, —á—Ç–æ–±—ã –Ω–∞—à –ª—é–±–∏–º—ã–π —Å–ø–æ—Ç –æ—Å—Ç–∞–≤–∞–ª—Å—è —á–∏—Å—Ç—ã–º –∏ –ø—Ä–∏—è—Ç–Ω—ã–º –¥–ª—è –≤—Å–µ—Ö.\n\n"
        "ü§ñ –•–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ –º–æ–∏—Ö —Ñ—É–Ω–∫—Ü–∏—è—Ö? –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –∫–æ–º–∞–Ω–¥—É /help –∏ —è –ø–æ–∫–∞–∂—É —Ç–µ–±–µ –≤—Å–µ, —á—Ç–æ —É–º–µ—é!\n\n"
        "üîç –ï—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å? –ù–µ —Å—Ç–µ—Å–Ω—è–π—Å—è –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ –º–æ–µ–º—É —Å–æ–∑–¥–∞—Ç–µ–ª—é @ilyafomintsev - –æ–Ω –≤—Å–µ–≥–¥–∞ –Ω–∞ —Å–≤—è–∑–∏, —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –Ω–∞—à–µ –æ–±—â–µ–Ω–∏–µ –µ—â–µ –ª—É—á—à–µ."
    )
    await message.reply(welcome_message)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
@dp.message_handler(commands=['help'])
async def send_help_message(message: types.Message):
    help_message = (
        "üëã –í–æ—Ç —á—Ç–æ —è –º–æ–≥—É –¥–µ–ª–∞—Ç—å:\n\n"
        "1Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤–ª—è—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –∑–∞–¥–∞—á–∞—Ö –Ω–∞ –¥–µ–Ω—å.\n"
        "2Ô∏è‚É£ –ù–∞–ø–æ–º–∏–Ω–∞—Ç—å –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ —á–∏—Å—Ç–æ—Ç—ã –∫–æ—Ñ–µ–π–Ω–∏ –∫–∞–∂–¥—ã–µ –¥–≤–∞ —á–∞—Å–∞.\n"
        "3Ô∏è‚É£ –ù–∞–ø–æ–º–∏–Ω–∞—Ç—å –æ –ø–æ–ª–∏–≤–µ —Ä–∞—Å—Ç–µ–Ω–∏–π –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é.\n"
        "4Ô∏è‚É£ –ù–∞–ø–æ–º–∏–Ω–∞—Ç—å –æ –Ω–∞–ø–∏—Å–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–æ–≤ –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á–∞—Ö.\n\n"
        "üìÖ –Ø —Ç–∞–∫–∂–µ –º–æ–≥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å —Ç–µ–±–µ –æ –∑–∞–¥–∞—á–∞—Ö –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–Ω—è –Ω–µ–¥–µ–ª–∏.\n\n"
        "ü§ñ –ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å –∏–ª–∏ –µ—Å—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è? –û–±—Ä–∞—â–∞–π—Å—è –∫ –º–æ–µ–º—É —Å–æ–∑–¥–∞—Ç–µ–ª—é @ilyafomintsev"
    )
    await message.reply(help_message)

if __name__ == '__main__':
    chat_id = 'YOUR_CHAT_ID'
    loop = asyncio.get_event_loop()
    loop.create_task(scheduled_task_notifications(chat_id))
    loop.create_task(scheduled_cleanliness_reminders(chat_id))
    loop.create_task(scheduled_report_reminders(chat_id))
    loop.create_task(scheduled_watering_reminders(chat_id))
    executor.start_polling(dp, skip_updates=True)
